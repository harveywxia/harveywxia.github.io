<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://harveywxia.github.io</id>
    <title>harvey的网络日志</title>
    <updated>2021-08-27T07:53:45.938Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://harveywxia.github.io"/>
    <link rel="self" href="https://harveywxia.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://harveywxia.github.io/images/avatar.png</logo>
    <icon>https://harveywxia.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, harvey的网络日志</rights>
    <entry>
        <title type="html"><![CDATA[Github搭建个人主页]]></title>
        <id>https://harveywxia.github.io/post/github-da-jian-ge-ren-zhu-ye/</id>
        <link href="https://harveywxia.github.io/post/github-da-jian-ge-ren-zhu-ye/">
        </link>
        <updated>2021-08-27T06:27:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>GitHub Pages可以用来托管个人静态网站，便于用来实现博客。</p>
<h2 id="准备工作">准备工作</h2>
<ul>
<li>Gthub账号</li>
<li>域名(可选)</li>
</ul>
<h2 id="github-pages">Github Pages</h2>
<p>新建一个仓库，命名格式如下：</p>
<pre><code>{用户明}.github.io
</code></pre>
<p>需要选择public（公开）<br>
进入到该仓库的setting菜单（在star下面）中。可以选择并开启。<br>
此时在浏览器中即可访问页面，但是如果想更好的管理，可以使用Gridea。</p>
<h2 id="gridea">Gridea</h2>
<p>Gridea是一个静态博客写作客户端，所有文件都在本地，没有数据库，实现简单，支持Markdown。<br>
官网下载Gridea，安装并进入设置页面<br>
<img src="https://harveywxia.github.io/post-images/1630046301998.png" alt="" loading="lazy"></p>
<p>域名与仓库名一样,分支填master,email自己填,这里说一下Token.打开设置中的开发者设置:<br>
右上角头像--&gt;Settings --&gt;Developer settings --&gt;Personal access tokens--&gt;Generate token  勾选repo然后复制token即可。</p>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://www.cnblogs.com/6b7b5fc3/p/12716218.html">Github Pages+Gridea搭建个人博客</a></li>
<li><a href="https://www.jianshu.com/p/1520e4872a2c">「Gridea」给初接触者的一些使用技巧</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redmine配置]]></title>
        <id>https://harveywxia.github.io/post/redmine-pei-zhi/</id>
        <link href="https://harveywxia.github.io/post/redmine-pei-zhi/">
        </link>
        <updated>2020-05-23T13:13:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="问题状态">问题状态</h3>
<p>问题状态标签：新建问题、新建、进行中、已解决、反馈、已关闭、已拒绝、挂起。</p>
<ul>
<li><a href="https://www.cnblogs.com/biaopei/p/8891004.html">redmine添加自定义问题状态</a></li>
</ul>
<h3 id="跟踪标签">跟踪标签</h3>
<p>跟踪标签：里程碑、任务、需求用例、功能、缺陷<br>
项目中各跟踪标签的结构关系<br>
<img src="https://harveywxia.github.io/post-images/1590239926975.jpg" alt="" loading="lazy"><br>
说明：<br>
　　1．  5个里程碑：需求分析、概要设计、功能开发、系统测试、系统部署<br>
　　2． 在“需求分析”、“概要设计”、“系统测试”、“部署上线” 这几个里程碑中主要是以“任务”的形式指派给项目成员<br>
　　3． “功能开发”这个里程碑中有涉及到“需求用例”“功能”“任务”“缺陷”<br>
　　4.   若功能划分的不够细，则可将其以任务的形式再次划分。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS7安装redmine]]></title>
        <id>https://harveywxia.github.io/post/centos7-an-zhuang-redmine/</id>
        <link href="https://harveywxia.github.io/post/centos7-an-zhuang-redmine/">
        </link>
        <updated>2020-05-23T11:55:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>Redmine是用Ruby开发的基于web的项目管理软件，是用ROR框架开发的一套跨平台项目管理系统，通过“项目（Project）”的形式把成员、任务（问题）、文档、讨论以及各种形式的资源组织在一起，大家参与更新任务、文档等内容来推动项目的进度，同时系统利用时间线索和各种动态的报表形式来自动给成员汇报项目进度。</p>
<h2 id="安装流程">安装流程</h2>
<h3 id="docker环境安装">docker环境安装</h3>
<h4 id="卸载旧版本">卸载旧版本</h4>
<p>较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p>
<pre><code class="language-sh">$ sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine
</code></pre>
<h4 id="安装docker">安装docker</h4>
<p><strong>依赖环境</strong><br>
yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p>
<pre><code class="language-sh">$ sudo yum install -y yum-utils \
  device-mapper-persistent-data \
  lvm2
</code></pre>
<p><strong>安装 Docker Engine-Community</strong><br>
安装最新版本的 Docker Engine-Community 和 containerd.</p>
<pre><code class="language-sh">$ sudo yum install docker-ce docker-ce-cli containerd.io
</code></pre>
<p><strong>启动 Docker</strong></p>
<pre><code class="language-sh">$ sudo systemctl start docker
</code></pre>
<p><strong>测试</strong><br>
通过运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community 。</p>
<pre><code class="language-sh">$ sudo docker run hello-world
</code></pre>
<p>运行以上命令会打印出hello-world。</p>
<h4 id="安装docker-compose">安装docker-compose</h4>
<p>这里选择使用pip安装，pip的安装过程这里不展开。<br>
使用pip安装时建议使用<code>virtulenv</code>，运行以下命令安装：</p>
<pre><code class="language-sh">pip install docker-compose
</code></pre>
<p>如果你不使用virtulenv，则需要运行以下命令，完成安装。</p>
<pre><code class="language-sh">sudo pip install docker-compose
</code></pre>
<p><strong>测试</strong></p>
<pre><code class="language-sh">docker-compose -version
</code></pre>
<p>会打印出相关版本信息。<br>
<strong>参考</strong></p>
<ul>
<li><a href="https://docs.docker.com/compose/install/">Install Docker Compose</a></li>
</ul>
<h3 id="安装redmine">安装redmine</h3>
<pre><code class="language-yaml">version: '3'
services:
  redmine:
      image: redmine:4.1.1-alpine
      restart: always
      ports:
          - '8080:3000'
      environment:
          REDMINE_DB_MYSQL: mysql
          REDMINE_DB_PASSWORD: redminemysql
          REDMINE_SECRET_KEY_BASE: supersecretkey
      volumes:
        - '/usr/harvey/docker/redmine/redmine_dir:/usr/src/redmine/files'

  mysql:
      image: mysql:8.0.20
      restart: always
      environment:
        MYSQL_ROOT_PASSWORD: redminemysql
        MYSQL_DATABASE: redmine
      volumes:
        - '/usr/harvey/docker/redmine/mysql__dir:/var/lib/mysql'
</code></pre>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://hub.docker.com/_/redmine">dockerhub-redmine</a></li>
</ul>
<h2 id="测试">测试</h2>
<p>浏览器中输入以下网址，<br>
http://localhost:8080/login<br>
进入登录界面，默认用户名/密码：admin/admin</p>
<p>开始你的redmine之旅吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django rest framework 使用笔记  ]]></title>
        <id>https://harveywxia.github.io/post/django-rest-framework-shi-yong-bi-ji/</id>
        <link href="https://harveywxia.github.io/post/django-rest-framework-shi-yong-bi-ji/">
        </link>
        <updated>2020-04-25T09:55:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="models层">models层</h2>
<h3 id="models-field">models field</h3>
<p>在model中添加字段的格式一般为：  field_name = field_type(**field_options)</p>
<h4 id="field-options所有字段共用">field options(所有字段共用)</h4>
<ol>
<li>null   默认为False，True则表示可以为null。（空字符串在数据库中可能被存储为''）</li>
<li>blank  默认为False，True表示可以为空。</li>
<li>choice  可选的，限制了该选项的字段值必须是所指定的choice中的一个。</li>
</ol>
<pre><code class="language-python">from django.db import models

class Student(models.Model):
    FRESHMAN = 'FR'
    SOPHOMORE = 'SO'
    JUNIOR = 'JR'
    SENIOR = 'SR'
    YEAR_IN_SCHOOL_CHOICES = (
        (FRESHMAN, 'Freshman'),      #第一个参数是真正的model参数，#第二个参数则是方便人们理解阅读
        (SOPHOMORE, 'Sophomore'),
        (JUNIOR, 'Junior'),
        (SENIOR, 'Senior'),
    )
    year_in_school = models.CharField(
        max_length=2,
        choices=YEAR_IN_SCHOOL_CHOICES,
        default=FRESHMAN,
    )

    def is_upperclass(self):
        return self.year_in_school in (self.JUNIOR, self.SENIOR)
</code></pre>
<ol start="4">
<li><code>db_column</code>: 数据库<code>column</code>名称。默认为本字段的名称;</li>
<li><code>db_index</code>: 如果为<code>True</code>的话，该字段的数据库索引将会被创建;</li>
<li><code>default</code>: 设置该字段的默认值，可以是值也可以是对象;</li>
<li><code>editable</code>: 默认为<code>True</code>，若为<code>False</code>，则不会在<code>admin</code>界面显示;</li>
<li><code>primary_key</code>: 若设置为<code>True</code>，则表示将该字段设置为主键。一般情况下<code>django</code>默认会设置一个自增长的id主键;</li>
<li><code>unique</code>: 若设置为<code>True</code>，该字段值不可重复.</li>
</ol>
<p><strong><code>field type</code>(字段类型)</strong></p>
<h4 id="models基础字段">models基础字段</h4>
<p><code>AutoField()</code><br>
根据已有<code>id</code>自增长的整形唯一字段，一般每个<code>model</code>类不需设置该字段，因为<code>django</code>会为每个<code>model</code>自动设置。<br>
<code>django</code>默认会为每个<code>model</code>类添加如下语句：</p>
<pre><code>id = models.AutoField(primary_key=True)
</code></pre>
<p>当其他字段添加了<code>primary_key</code>属性，则不会创建<code>id</code>字段了,每个<code>model</code>类仅能有一个主键.</p>
<p><code>BooleanField()</code><br>
布尔型字段，默认的表单窗口部件是<code>CheckBoxInput</code></p>
<p><code>CharField()</code><br>
字符型字段，默认的表单窗口部件是<code>TextInput</code>。该字段类型有一个必需参数：<br>
<code>max_length</code>  在数据库水平限定了字符串最大长度</p>
<p><code>DateField()</code><br>
日期字段，字段的值是<code>python</code>中<code>datetime.date</code>的实例，默认的表单窗口是<code>TextInput</code>有几个可选的参数：</p>
<p><code>auto_now=True/False</code>: 当设置为True时，每当该对象使用save()时，该字段的值就会被更新。<br>
<code>auto_now_add=True/False</code>: 当设置为True时，该字段的值为该对象被创建时的日期</p>
<p><code>DateTimeField()</code><br>
日期和时间字段，值为<code>datetime.datetime</code>实例。默认的表单窗口以及可选参数同上。</p>
<p><code>DecimalField()</code><br>
混合精度的小数型数字字段。有两个必需的参数：<br>
<code>max_digits=ingt_number</code>:限定数字的最大位数（包含小数位）<br>
<code>decimal_places=int_number</code>:存储数字的小数位</p>
<pre><code>#to store numbers up to 999 with a resolution of 2 decimal places, you’d use
models.DecimalField(..., max_digits=5, decimal_places=2)
</code></pre>
<p><code>EmailField(max_length=254, **options)</code><br>
邮件字段，使用<code>EmailValidator</code>进行验证</p>
<p><code>FileField(upload_to=None, max_length=100, **options)</code><br>
文件上传字段。这个字段不能设置<code>primary_key</code>和<code>unique</code>选项.在数据库中存储类型是<code>varchar</code>，默认最大长度为100.<br>
有两个可选参数：<br>
<code>upload_to</code>: 如果使用默认的FileSystomStorage，文件将会存储到settings文件中配置的MEDIA_ROOT路径中。upload_to的值也可以为可调用对象,通过调用这个对象可以获得上传路径。<br>
instance=:  定义了FileField的模型实例<br>
filename='':  文件名称。</p>
<pre><code class="language-python">class MyModel01(models.Model):
    # file will be uploaded to MEDIA_ROOT/uploads
    upload = models.FileField(upload_to='uploads/')
    # or...
    # file will be saved to MEDIA_ROOT/uploads/2015/01/30
    upload = models.FileField(upload_to='uploads/%Y/%m/%d/')

#upload_to=可调用对象
def user_directory_path(instance, filename):
    # file will be uploaded to MEDIA_ROOT/user_&lt;id&gt;/&lt;filename&gt;
    return 'user_{0}/{1}'.format(instance.user.id, filename)

class MyModel02(models.Model):
    upload = models.FileField(upload_to=user_directory_path)
</code></pre>
<p>storage  用来设定文件存储仓库</p>
<p><code>FilePathField(path=None, match=None, recursive=False, max_length=100, **options)</code><br>
这个字段的值被限制在系统上某个目录中的所有文件名集合中。有三个参数:</p>
<p>path='':  该参数必需。上行所说的'某个目录’的绝对路径。Example: &quot;/home/images&quot;.<br>
match='pattern':  可选参数。格式是正则表达式。用来拣选符合匹配正则表达式的文件<br>
recursive=True/False: 可选参数，默认为False。设定是否递归该目录下所有子目录的所有文件。</p>
<pre><code class="language-python">FilePathField(path=&quot;/home/images&quot;, match=&quot;foo.*&quot;, recursive=True)
</code></pre>
<p><code>FloatField()</code><br>
浮点字段，默认的表单窗口部件是<code>NumberInput</code>。和<code>DecimalField</code>经常混淆不清，<code>FloatField</code>在内部使用<code>Python</code>中的<code>float</code>对象，而<code>DecimalField</code>在内部使用<code>Python</code>中的<code>decimal</code>对象。</p>
<p><code>ImageField(upload_to=None, height_field=None, width_field=None, max_length=100, **options)</code></p>
<p>图像字段。继承了<code>FileField</code>的所有属性和方法。而且还能自动验证上传的对象是否为合法的图像。</p>
<p><code>IntegerField()</code><br>
整型字段。</p>
<p><code>GenericIPAddressField(protocol='both', unpack_ipv4=False, **options)</code><br>
ip地址字段<br>
<code>protocol='both/ipv4/ipv6'</code>:  默认为both<br>
<code>unpack_ipv4</code>:  用处不大。</p>
<p><code>NullBooleanField()</code><br>
类似于<code>BooleanField</code>，不同的是其允许值为<code>null</code></p>
<p><code>TextField()</code><br>
与<code>CharField</code>类似，但一般用来存储体积较大的文本。</p>
<p>TimeField(auto_now=False, auto_now_add=False, **options)`<br>
时间字段，其值为datetime.time实例</p>
<p>URLField(max_length=200, **options)<code>URL字段, 类似于</code>CharField`的子类，默认最大长度为200.</p>
<p>UUIDField(**options)<code>通用唯一标识字段，当不想用</code>django<code>默认设置的</code>AutoField`字段时，可以用该字段代替。</p>
<h4 id="关系字段">关系字段</h4>
<p><strong>1. 一对一</strong>：  现在有很多一对一辅导班，也就是上课时，一个老师对应一个学生，一个学生对应一个老师<br>
　　<strong>2. 多对一</strong>：  很多偏远山区的学校可能整个学校只有一个老师，这一个老师对应多个学生，所有的学生对应这一个老师<br>
　　<strong>3. 多对多</strong>：  而我们则很幸福，学校里有许多老师，一个老师教习一科，学生有多个老师，老师有多个学生。</p>
<h5 id="foreignkeyothermodel-on_delete-options">ForeignKey(othermodel, on_delete, **options)</h5>
<p>用于多对一或者一对多或者外键字段:<br>
<code>othermodel</code>：  所关联的模型，'多' model使用外键关联  '一'model。<br>
当所关联的模型为他自己时，使用'self';<br>
当引用的模型为其他app中的模型时，要加上app名称标签:  'app_name.model_name';<br>
数据库会自动在外键字段上创建索引，可以使用de_index=False关闭该功能。<br>
<code>on_delete</code>： 当删除 &quot;一&quot; 模型对象时，django会根据该参数的值对与该对象相关联的其他对象(也就是 '多’)进行操作。<br>
<em>在django1.9以及之前的版本中，on_delete作为一个关键字参数。而在1.10则可以作为第二个参数</em><br>
<code>models.CASCADE</code>：   默认为models.CASCADE   级联删除。当删除'一'时，'多’会被删除。比如：</p>
<pre><code class="language-python"># mysite项目下名为polls的app中的models.py
class follower(models.Model):
    name = models.CharField(max_length=200)
    menpai = models.ForeignKey('menpai', on_delete=models.CASCADE)  #定义了models.CASCADE属性

    def __str__(self):
        return self.name

class menpai(models.Model):
    name = models.CharField(max_length=200)

    def __str__(self):
        return self.name

#运行 python3 manager.py shell进入交互页面
&gt;&gt;&gt; from polls.models import follower,menpai
&gt;&gt;&gt; m1=menpai(name='huashanpai')   
&gt;&gt;&gt; m1.save()
&gt;&gt;&gt; m2=menpai(name='riyuejiao')
&gt;&gt;&gt; m2.save()
&gt;&gt;&gt; f1=follower(name='linghuchong',menpai=m1)
&gt;&gt;&gt; f1.save()
&gt;&gt;&gt; f2=follower(name='renwoxing',menpai=m2)
&gt;&gt;&gt; f2.save()
&gt;&gt;&gt; f1.menpai
&lt;menpai: huashanpai&gt;
&gt;&gt;&gt; m1.delete()
(2, {'polls.menpai': 1, 'polls.follower': 1})   # 删除华山派时，将令狐冲也删除了
</code></pre>
<p><code>modles.PROTECT</code> : 当删除一个具有外键关系的对象时，会引发一个异常，阻止删除该对象<br>
<code>models.SET_NULL</code>: 设置删除对象所关联的外键字段为null。但字段的null属性必需为True<br>
<code>models.SET_DEFAULT</code> : 设置删除对象所关联的外键字段为默认的值。<br>
<code>models.SET(value)</code>：设置删除对象所关联的对象的外键字段为value,value也可以是一个可调用函数。</p>
<pre><code class="language-python">from django.conf import settings
from django.contrib.auth import get_user_model
from django.db import models

def get_sentinel_user():
    return get_user_model().objects.get_or_create(username='deleted')[0]

class MyModel(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET(get_sentinel_user),
    )
</code></pre>
<p><code>models.DO_NOTHING</code>: 不做任何操作<br>
<code>limit_choices_to</code>: 限制该字段为选项形。格式：<code>limit_choices_to={'is_staff': True}</code>。值也可以为可调用函数。</p>
<pre><code class="language-python">def limit_pub_date_choices():
    return {'pub_date__lte': datetime.date.utcnow()}

limit_choices_to = limit_pub_date_choices
</code></pre>
<p><code>related_name</code>  设置从关联对象到自身的关系的名称，若值为'+'  则关联对象与自身无逆向关系。详解请看官方文档。举例：<br>
<code>related_name</code>的作用是在反向引用的时候，就是通过User去找<code>Employee</code>的时候，用<code>User.user_employee</code>，引文关键词叫：<code>reverse accessor</code>。</p>
<pre><code class="language-python">class Employee(generic.BO):
    user = models.OneToOneField(User,verbose_name=_(&quot;登录账户&quot;),blank=True,null=True,on_delete=models.CASCADE,related_name='user_employee')
</code></pre>
<p><code>to_field</code>  设置所关联对象的关联字段。默认为关联对象的主键字段。</p>
<p><a href="https://blog.csdn.net/djskl/article/details/42041767">OneToOneField和ForeignKey有什么区别</a></p>
<h5 id="manytomanyfieldothermodel-options">ManyToManyField(othermodel, **options)</h5>
<p>多对多字段。</p>
<p><code>othermodel</code>:  所关联的model名称;<br>
<code>db_table</code>:  多对多关系会在两个模型所对应的表中间创建一个'中间表’ ，将多对多转换为两个多对一，该选项为这个中间表设置名称。一般来说django会默认为中间表创建名称，但人们读起来可能搞不清楚究竟中间表关联到了哪里;<br>
<code>related_name</code>:  同多对一字段中的related_name;<br>
<code>limite_choices_to</code>:  同....;<br>
<code>symmetrical</code>:  当多对多关联对象为自身时可能会用到的参数。默认为True。a,b同属于person模型，person中的friends字段与自身设置了多对多关系，当该值设置为True时，django假定关系为对称，即：a是b的朋友，那么b也是a的朋友。设置为False时，django会强制为逆向关系创建描述信息;<br>
<code>though</code>:  不想让django自动创建中间表，手动创建中间表所对应的model，通过though指定对应的model名称;<br>
<code>though_field</code>:  当though参数被使用时，该参数才会有效。指定使用哪些中间模型字段来确立两个模型的多对多关系;</p>
<h5 id="onetoonefieldothermodel-on_delete-parent_linkfalse-options">OneToOneField(othermodel, on_delete, parent_link=False, **options)</h5>
<p>一对一字段。<br>
othermodel: .......<br>
on_delete:........<br>
related_name:...........<br>
<strong>参考资料</strong></p>
<ol>
<li><a href="https://stackoverflow.com/questions/27668064/fail-to-post-onetoonefield-with-django-rest">Fail to POST OneToOneField with Django REST</a></li>
<li><a href="https://docs.djangoproject.com/en/2.1/ref/models/fields/">参考</a></li>
</ol>
<p><strong>关联</strong><br>
<strong>关联未定义的Model</strong><br>
如果你要与某个尚未定义的model建立关联，就使用model的名称，而不是使用model对象本身。</p>
<pre><code class="language-python">class Book(models.Model):
    pub = models.ForeignKey('Publisher')
</code></pre>
<p><strong>关联自身</strong><br>
可以与自身建立多对一或者一对一关系。</p>
<pre><code class="language-python">class People(models.Model):
    name=models.CharField(max_length=20)
    leader=models.ForeignKey('self',blank=True,null=True)

class Person(models.Model):
    friends = models.ManyToManyField(&quot;self&quot;)

//通过shell添加关系
&gt;&gt;&gt;p1.friends.add(p2,p3)
</code></pre>
<p>默认情况下，这种关联关系是对称的，如果<code>person1</code>是<code>person2</code>的朋友，那么<code>person2</code>也是<code>person1</code>的朋友，要查找<code>person2</code>的所有朋友可以直接使用<code>person2.friends.all()</code>。<br>
如果要取消这种对称关系，可以将<code>symmetrical</code>设置为False：</p>
<pre><code class="language-python">class Person2(models.Model):
    friends=models.ManyToManyField(&quot;self&quot;,symmetrical=False)
</code></pre>
<p>这样查询p3的朋友，就需要<code>p3.person_set.all()</code>了<br>
<strong>反向名称related_name</strong><br>
反向名称用来从被关联字段指向关联字段。</p>
<pre><code class="language-python">class Book(models.Model):
    name=models.CharField(max_length=20)
    pub=models.ForeignKey(Publisher,related_name='pub')
    authors=models.ManyToManyField(Author,related_name='author')
</code></pre>
<p>这样用Publisher或者Author反向查询Book时可以用related_name了:<code>publisher1.pub.all()</code>或者<code>author1.author.all()</code>。<br>
如果不想设置反向关心，则设置<code>related_name</code>为<code>'+'</code>或者以<code>'+'</code>结束。<br>
<code>user = models.ForeignKey(User, related_name='+')</code><br>
如果有多个<code>ManyToManyField</code>指向同一个Model，这样反向查询FOO_set的时候就无法弄清是哪个ManyToManyField字段了，所以可以禁止反向关系：</p>
<pre><code class="language-python">users = models.ManyToManyField(User, related_name='u+')
referents = models.ManyToManyField(User, related_name='ref+')
</code></pre>
<p><a href="https://blog.csdn.net/Crow_n/article/details/58135127?utm_source=blogxgwz7">参考</a></p>
<h2 id="认证和权限">认证和权限</h2>
<p><code>settings.py</code>设置默认的认证方式和权限。</p>
<pre><code class="language-python">REST_FRAMEWORK = {
    # 全局，默认认证
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
    ),
    # 全局，默认权限
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}
</code></pre>
<h3 id="django-rest-auth">django-rest-auth</h3>
<p><code>django-rest-auth</code>用户管理app，<a href="https://django-rest-auth.readthedocs.io/en/latest/api_endpoints.html">网址</a></p>
<h4 id="用户管理">用户管理</h4>
<h5 id="登陆">登陆</h5>
<pre><code>/rest-auth/login/ (POST)

username
email
password
Returns Token key
</code></pre>
<h5 id="登出">登出</h5>
<pre><code>/rest-auth/logout/ (POST)
</code></pre>
<h5 id="重置密码">重置密码</h5>
<pre><code>/rest-auth/password/reset/ (POST)
email
</code></pre>
<h5 id="确认密码">确认密码</h5>
<pre><code>/rest-auth/password/reset/confirm/ (POST)

uid
token
new_password1
new_password2
</code></pre>
<p><strong>Note</strong>:<code>uid</code>和<code>token</code>是请求重置密码接口<code>/rest-auth/password/reset/</code>返回的</p>
<h5 id="修改密码">修改密码</h5>
<pre><code>/rest-auth/password/change/ (POST)

new_password1
new_password2
old_password
</code></pre>
<h5 id="查询用户信息">查询用户信息</h5>
<pre><code>/rest-auth/user/ (GET, PUT, PATCH)

username
first_name
last_name
Returns pk, username, email, first_name, last_name
</code></pre>
<h5 id="注册">注册</h5>
<pre><code>/rest-auth/registration/ (POST)

username
password1
password2
email
</code></pre>
<h5 id="确认">确认</h5>
<pre><code>/rest-auth/registration/verify-email/ (POST)

key
</code></pre>
<h3 id="自定义用户认证">自定义用户认证</h3>
<p><strong>BaseAuthentication</strong>类：<br>
<code>django rest-framework</code> 通过<code>BaseAuthentication</code> 实现认证功能,无论是自定义的认证类还是<code>rest-framework</code>自带的认证类都应该继承<code>BaseAuthentication</code>.<code>BaseAuthentication</code> 中有两个方法<code>authenticate</code>和<code>authenticate_header</code>,其中<code>authenticate</code>方法必须实现 如果用户需要自定义认证方法则继承<code>BaseAuthentication</code>重写<code>authenticate</code>方法即可.</p>
<ol>
<li>新建<code>UserToken</code><br>
修改<code>models.py</code>文件，增减<code>UserToken</code>类，其中<code>UserInfo</code>也可使用系统的User类，具体如下：</li>
</ol>
<pre><code class="language-python">from django.db import models
class UserInfo(models.Model):
        user_type_choices = (
                (1, '普通用户'),
                (2, 'VPI'),
                (3, 'SVPI'),
        )
        user_type = models.IntegerField(choices=user_type_choices)
        username = models.CharField(max_length=32, unique=True)
        password = models.CharField(max_length=64)

class UserToken(models.Model):
        user = models.OneToOneField('UserInfo', models.CASCADE)
        token = models.CharField(max_length=64)
</code></pre>
<ol start="2">
<li>构建认证代码<br>
打开<code>APP_DIR/utils/auth.py</code>（若无，则新建该文件），将认证代码放入其中。</li>
</ol>
<pre><code class="language-python">from rest_framework import exceptions
from rest_framework.authentication import BaseAuthentication
from app01 import models

# 实现自定义的认证类
class Authtication(BaseAuthentication):
        def authenticate(self, request):
                # 这儿的 request 对象不是 django 原生的 request 而是 rest_framework 内部进行封装过的 request
                # 使用 request._request 调用 django 原生的 request 对象
                token = request._request.GET.get('token')
                # 检查用户的 token 是否合法
                token_obj = models.UserToken.objects.filter(token=token).first()
                if not token_obj:
                        # rest_framework 会在内部捕捉这个异常并返回给用户认证失败的信息
                        raise exceptions.AuthenticationFailed('用户认证失败')
                # 在 rest_framework 内部会将这两个字段赋值给request以供后续调用
                return (token_obj.user, token_obj)

</code></pre>
<ol start="3">
<li>修改<code>views.py</code>文件</li>
</ol>
<pre><code class="language-python">from django.http import JsonResponse
from rest_framework.views import APIView
from app01.utils.auth import Authtication
import hashlib
import time

# 生成 token 字符串
def md5(user):
        ctime = str(time.time())
        m = hashlib.md5(bytes(user, encoding='utf-8'))
        m.update(bytes(ctime, encoding='utf-8'))
        return m.hexdigest()

# 用户登录
class AuthView(APIView):
        def post(self, request):
                ret = {'code':1000, 'msg':None}
                try:
                        user = request._request.POST.get('username')
                        pwd = request._request.POST.get('password')

                        obj = models.UserInfo.objects.filter(username=user, password=pwd).first()
                        if not obj:
                                ret['code'] = 1001
                                ret['msg'] = &quot;用户名或密码错误&quot;
                        # 为登录用户创建token
                        token = md5(user)
                        #存在更新 不存在创建
                        models.UserToken.objects.update_or_create(user=obj, defaults={'token':token})
                        ret['token'] = token
                except:
                        ret['code'] = 1002
                        ret['msg'] = '请求异常'
                return JsonResponse(ret)

# 业务代码
class Order(APIView):
        # 注册自定义的认证类,　可以有多个,　从左到右进行认证匹配
        authentication_classes = [Authtication,]

        def get(self, request):
                # request.user  这个值等于 Authtication 返回的元组的第一个值
                # request.auth  这个值等于 Authtication 返回的元组的第二个值
                ret = {'code':1000, 'msg':None, 'data':None}
                ret['data'] = '欢迎使用本系统'
                return JsonResponse(ret)
</code></pre>
<ol start="4">
<li><code>rest_framework</code>内置的认证类：</li>
</ol>
<pre><code class="language-python">BasicAuthentication             # 基于浏览器实现的 Basic 认证, ftp 使用网页登录时使用的就是 Basic 认证
SessionAuthentication           # 基于 django 的 user.is_active 进行认证
TokenAuthentication             # 简单的基于 token 的认证
RemoteUserAuthentication        # 简单的远程用户认证实现
</code></pre>
<p>可参考文档：<br>
<a href="https://blog.csdn.net/zzg_550413470/article/details/52239867">Django 认证系统</a></p>
<ol start="5">
<li>配置全局生效的认证类和匿名用户：<br>
自定义的认证类如果每次都在指定的类中使用<code>authentication_classes</code>指定,就有可能出现大量的重复代码。我们可以通过全局设置让指定的认证类对继承自<code>APIView</code>的所有类生效，修改<code>settings.py</code>文件。</li>
</ol>
<pre><code class="language-python">REST_FRAMEWORK = {
        # 设置全局生效的认证类(可以有多个)
        # app01 为 django app 的名称
        # utils 为 app 目录下面的 utils 目录(这个目录必须包含 __init__.py 文件)
        # auth 为 utils 目录下面的 auth.py 文件
        # Authtication 为 auth.py 文件里面的 Authtication 类
        # 这儿的设置其实就是使用 from ... import ... 的路径

        'DEFAULT_AUTHENTICATION_CLASSES': [&quot;app01.utils.auth.Authtication&quot;,],

        #匿名用户配置
        'UNAUTHENTICATED_USER': None,           # 设置匿名用户的用户名, 默认为 AnonymousUser, 使用 request.user 查看
        'UNAUTHENTICATED_TOKEN': None,          # 设置匿名用户的 token, 默认为 None, 使用 request.auth 查看
}
</code></pre>
<ol start="6">
<li>指定<code>View</code>类不使用全局的认证类：<br>
在不使用全局认证类的<code>View</code>类中添加<code>authentication_classes = []</code>或者``authentication_classes = ['xxxx']`</li>
</ol>
<pre><code class="language-python"># authentication_classes = [] 表示不使用认证
# authentication_classes = ['xxxx'], xxxx 表示当前类需要使用的认证类用于替换全局类
</code></pre>
<p><a href="http://blog.51cto.com/hongchen99/2306783">参考链接</a></p>
<h2 id="错误">错误</h2>
<ol>
<li>Django Rest Framework - “detail”: “Not found.”`<br>
遇到的情况是url被其他路由拦截。</li>
<li><code>Django：CSRF Failed: CSRF token missing or incorrect</code><br>
登陆成功后一直返回<code>Django：CSRF Failed: CSRF token missing or incorrect</code>其实不是<code>跨域问题</code>，而是Django自带的<em>用户验证机制</em>导致，为此我们需要在请求头重添加<code>X-CSRFToken</code>,步骤如下：将Postman返回的cookie中的csrftoken值复制到请求头中，</li>
</ol>
<table>
<thead>
<tr>
<th>KEY</th>
<th>VALUE</th>
</tr>
</thead>
<tbody>
<tr>
<td>X-CSRFToken</td>
<td>cookie中的token值</td>
</tr>
</tbody>
</table>
<p>之后提交请求即可。</p>
<ol>
<li><a href="https://docs.djangoproject.com/en/2.1/ref/csrf/">官网链接</a></li>
<li><a href="http://python.jobbole.com/89305/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts">简化django的八个python包</a></li>
<li><a href="https://blog.csdn.net/Odyssues_lee/article/details/80948818">参考资料</a></li>
</ol>
<h2 id="数据查询">数据查询</h2>
<h3 id="django-queryset">django queryset</h3>
<p>实现基本的增删改查等。</p>
<ol>
<li><a href="https://feifeiyum.github.io/2017/03/28/python-django-queryset/">Django QuerySet 方法梳理</a></li>
<li><a href="https://feifeiyum.github.io/2017/04/10/python-django-querysetapi/">常用 Django QuerySet Api</a></li>
</ol>
<h3 id="django_filter">django_filter</h3>
<p>实现定制化的查询功能，可对不同字段进行精确和模糊查询。</p>
<ol>
<li><a href="https://pypi.org/project/django-filter/">pypy官网</a></li>
<li><a href="https://django-filter.readthedocs.io/en/master/guide/rest_framework.html">官方文档</a></li>
<li><a href="https://www.jianshu.com/p/3a6ab28b3925">用django-filter实现高级搜索</a></li>
</ol>
<h3 id="外键-serializer">外键 serializer</h3>
<p>自动序列化外键时会遇到一些问题。<br>
<strong>参考文献</strong></p>
<ol>
<li><a href="https://stackoverflow.com/questions/28706072/drf-3-creating-many-to-many-update-create-serializer-with-though-table#">DRF 3 - Creating Many-to-Many update/create serializer with though table<br>
</a></li>
<li><a href="https://stackoverflow.com/questions/29950956/drf-simple-foreign-key-assignment-with-nested-serializers">DRF: Simple foreign key assignment with nested serializers?</a></li>
<li><a href="https://stackoverflow.com/questions/50015204/direct-assignment-to-the-forward-side-of-a-many-to-many-set-is-prohibited-use-e">manytomany 保存方式</a></li>
</ol>
<pre><code class="language-python"># 直接保存多对多关系
    def create(self, validated_data):
        if validated_data.get('help_poor'):
            help_poor_datas = validated_data.pop('help_poor')
            activity_arrangement = ActivityArrangement.objects.create(**validated_data)

            for help_poor_data in help_poor_datas:
                help_poor = HelpPoor.objects.create(**help_poor_data)
                activity_arrangement.help_poor.add(help_poor)
        else:
            activity_arrangement = ActivityArrangement.objects.create(**validated_data)
        return activity_arrangement
</code></pre>
<h2 id="数据库">数据库</h2>
<h3 id="数据库连接">数据库连接</h3>
<h4 id="django连接mongodb数据库">django连接mongodb数据库</h4>
<p><strong>参考文献</strong></p>
<ol>
<li><a href="https://django-mongodb-engine.readthedocs.io/en/latest/topics/setup.html">Django MongoDB Engine</a></li>
<li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-enterprise-on-os-x/">mongo数据库官方文档</a></li>
</ol>
<h4 id="model-migrate-问题">model migrate 问题</h4>
<h5 id="django-migrate-error-table-xxx-already-exists">django migrate error: table 'xxx' already exists</h5>
<p>多为移库后，库表与migration文件不符造成，可以使用以下命令解决。</p>
<pre><code class="language-bash">python manage.py migrate --fake &lt;appname&gt;
</code></pre>
<p><strong>参考文献</strong></p>
<ol>
<li><a href="https://blog.csdn.net/zhiruchen/article/details/51243067">参考</a></li>
<li><a href="http://stackoverflow.com/questions/25924858/django-1-7-migrate-gets-error-table-already-exists">stack over flow</a></li>
</ol>
<h3 id="数据库迁移">数据库迁移</h3>
<h4 id="slqlite3迁移mysql">slqlite3迁移mysql</h4>
<p>数据库的迁移方法针对不同数据库，如 SQLite3, MySQL, PostgreSQL 之间数据迁移方案，以及数据在不同机器上迁移方案</p>
<h5 id="简单的数据导出与导入简单的迁移">简单的数据导出与导入（简单的迁移）</h5>
<ol>
<li><code>django</code> 项目提供了一个导出的方法 <code>python manage.py dumpdata</code>, 不指定 <code>appname</code>时默认为导出所有的app</li>
</ol>
<pre><code class="language-bash">python manage.py dumpdata [appname] &gt; appname_data.json
</code></pre>
<p>比如我们有一个项目叫<code>mysite</code>, 里面有一个<code>app</code>叫<code>blog</code>,我们想导出<code>blog</code>的所有数据</p>
<pre><code class="language-bash">python manage.py dumpdata blog &gt; blog_dump.json
</code></pre>
<ol start="2">
<li>数据导入,不需要指定<code>appname</code></li>
</ol>
<pre><code class="language-bash">python manage.py loaddata blog_dump.json
</code></pre>
<p><strong>! ! ! 注意:</strong><br>
使用该方法解决问题，缺少表时手动添加库表<br>
备注：一些常用的</p>
<pre><code class="language-bash">python manage.py dumpdata auth &gt; auth.json # 导出用户数据
</code></pre>
<p>优点：可以兼容各种支持的数据库，也就是说，以前用的是<code>SQLite3</code>，可以导出后，用这种方法导入到<code>MySQL</code>, <code>PostgreSQL</code>等数据库，反过来也可以。<br>
缺点：数据量大的时候，速度相对较慢，表的关系比较复杂的时候可以导入不成功。</p>
<p>如果你运气好的话可能会导入完成，但是往往不那么顺利，原因如下：<br>
a) 我们在写<code>models</code>的时候如果用到<code>CharField</code>,就一定要写<code>max_length</code>,在<code>sqlite3</code>中是不检查这个最大长度的，你写最大允许长度为100，你往数据库放10000个，<code>sqlite3</code>都不报错，而且不截断数据的长度，这似乎是<code>slite3</code>的优点，但是也给从<code>sqlite3</code>导入其它数据库带来了困难,因为<code>MySQL</code>和<code>PostgreSQL</code>数据库都会检查最大长度，超出时就报错！</p>
<p>b) Django 自带的contentType会导致出现一些问题<br>
用上面的方法只迁移一个app应该问题不大，但是如果有用户，用户组挂钩，事情往往变得糟糕！如果导入后没有对数据进行修改，你可以考虑重新导入，可能还要快一些，如果是手动在后台输入或者修改过，这种方法就不适用了<br>
<strong>参考文献</strong><br>
<a href="https://code.ziqiangxuetang.com/django/django-data-migration.html">自强学堂</a></p>
<h5 id="问题">问题</h5>
<ol>
<li>Django 2.0 SQLite3 to MySQL loaddata error: “The database backend does not accept 0 as a value for AutoField.”</li>
</ol>
<pre><code class="language-json">//For illustration in datadump_3-7-18.json:
[
    {                                 //&lt;----- I GOT DELETED  
        &quot;model&quot;: &quot;inventory.bike&quot;,    //&lt;----- I GOT DELETED  
        &quot;pk&quot;: 0,                      //&lt;----- I GOT DELETED  
        &quot;fields&quot;: {                   //&lt;----- I GOT DELETED   
           //...                      //&lt;----- I GOT DELETED  
        }                             //&lt;----- I GOT DELETED  
    },                                //&lt;----- I GOT DELETED  
    {
        &quot;model&quot;: &quot;inventory.bike&quot;,
        &quot;pk&quot;: 1,
        &quot;fields&quot;: {
           //...
        }
    },
    {
        &quot;model&quot;: &quot;inventory.bike&quot;,
        &quot;pk&quot;: 2,
        &quot;fields&quot;: {
           //...
        }
    }
]
</code></pre>
<p><a href="https://stackoverflow.com/questions/49164472/django-2-0-sqlite3-to-mysql-loaddata-error-the-database-backend-does-not-accep">stackoverflow</a></p>
<h2 id="从view到viewset">从view到viewset</h2>
<p>django使用View，</p>
<ol>
<li><a href="https://www.jianshu.com/p/2700ff413250">django-rest-framework(概念篇)——apiview&amp;viewset</a></li>
</ol>
<h4 id="分页">分页</h4>
<p>在drf中对于数据的返回支持多种分页技巧，在官网中主要向我们介绍了PageNumberPagination、LimitOffsetPagination、CursorPagination。</p>
<ol>
<li>配置全局分页<br>
采用全局配置需要在配置文件中设置，例如将全局分页设置为PageNumberPagination，需要在base.py中添加如下配置：</li>
</ol>
<pre><code class="language-python">REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100
}
</code></pre>
<ol start="2">
<li>单独设置分页<br>
如果需要对每个视图进行单独配置，需要设置ModelViewSet中的pagination_class值，示例如下：</li>
</ol>
<pre><code class="language-python">class MachineRoomViewSet(viewsets.ModelViewSet):
    &quot;&quot;&quot;
    机房操作视图
    &quot;&quot;&quot;
    queryset = MachineRoom.objects.all()
    serializer_class = MachineRoomSerializer
    pagination_class = PageNumberPagination
</code></pre>
<ol start="3">
<li>修改分页风格<br>
如果你需要修改分页风格 ，系需要重写分页类，然后设置你需要修改的属性。</li>
</ol>
<pre><code class="language-python">class LargeResultsSetPagination(PageNumberPagination):
    page_size = 1000
    page_size_query_param = 'page_size'
    max_page_size = 10000

class StandardResultsSetPagination(PageNumberPagination):
    page_size = 100
    page_size_query_param = 'page_size'
    max_page_size = 1000

# 然后在视图中使用.pagination_class属性调用该自定义类
class BillingRecordsView(generics.ListAPIView):
    queryset = Billing.objects.all()
    serializer_class = BillingRecordsSerializer
    pagination_class = LargeResultsSetPagination

# 或者是在设置中修改DEFAULT_PAGINATION_CLASS
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'apps.core.pagination.StandardResultsSetPagination'
}
</code></pre>
<ol start="5">
<li>pageNumberPagination使用方法<br>
这个分页样式接受请求查询参数中的一个数字页面号。</li>
</ol>
<pre><code>GET https://api.example.org/accounts/?page=4
</code></pre>
<p>响应对象</p>
<pre><code>HTTP 200 OK
{
    &quot;count&quot;: 1023
    &quot;next&quot;: &quot;https://api.example.org/accounts/?page=5&quot;,
    &quot;previous&quot;: &quot;https://api.example.org/accounts/?page=3&quot;,
    &quot;results&quot;: [
       …
    ]
}
</code></pre>
<p><a href="https://blog.csdn.net/runnoob_1115/article/details/78506659">Django-restframework Pagination（分页）</a></p>
<p><a href="https://www.django-rest-framework.org/api-guide/pagination/">Django-rest-framework pagination</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://harveywxia.github.io/post/hello-gridea/</id>
        <link href="https://harveywxia.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>